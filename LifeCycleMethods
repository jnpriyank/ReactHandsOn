

// timer practical
class Timer extends React.Component
{
	constructor(props){
    	super(props);
        console.log(this);
        this.state = { timeElapsed: 0};
        console.log(this.state);
        console.log(this.props);
        /* will not be available
        console.log('nextProps');
        console.log(nextProps);
        console.log('nextState');        
        console.log(nextState);
        */
    }
    
	tick(){
    	this.setState({timeElapsed: this.state.timeElapsed+1});
    }

	// component will not update, initial render and forupdate works.
    //shouldComponentUpdate(nextProps,nextState){    return false;    }
	shouldComponentUpdate(nextProps,nextState){    
    	console.log('nextProps');
        console.log(nextProps);
        console.log('nextState');        
        console.log(nextState);
    // here you can compare previous and next props and state values and
    // decide what should be done.
    return false;
    }
    //componentWillMount(){}
    componentDidMount(){
    //this.interval = setInterval(this.tick,1000);	// not working
    //this.interval = setInterval(()=>{this.tick();},1000);
    this.interval = setInterval(()=>this.tick(),1000);
    }
    
    componentWillUnmount(){
    	clearInterval(this.interval);
    }
    
    render(){
    	return <div>Time Elapsed: {this.state.timeElapsed}</div>;
    }
}

ReactDOM.render(<Timer name='prop'/>,mountNode);

// using nextProps and nextState
class Timer extends React.Component
{
	constructor(props){
    	super(props);
        //console.log(this);
        this.state = { timeElapsed: 0};
        //console.log(this.state);
        //console.log(this.props);
        /* will not be available
        console.log('nextProps');
        console.log(nextProps);
        console.log('nextState');        
        console.log(nextState);
        */
    }
    
	tick(){
    	this.setState({timeElapsed: this.state.timeElapsed+1});
    }

	// component will not update, initial render and forupdate works.
    //shouldComponentUpdate(nextProps,nextState){    return false;    }
	shouldComponentUpdate(nextProps,nextState){    
    	/*	working
        console.log('nextProps');
        console.log(nextProps);
        console.log('nextState');        
        console.log(nextState);
        */
    // here you can compare previous and next props and state values and
    // decide what should be done.
    return false;
    }
    //componentWillMount(){}
    componentDidMount(nextProps,nextState){
    	//this.interval = setInterval(this.tick,1000);	// not working
    	//this.interval = setInterval(()=>{this.tick();},1000);
    	this.interval = setInterval(()=>this.tick(),1000);
   /* not working
        console.log('nextProps');
        console.log(nextProps);
        console.log('nextState');        
        console.log(nextState);
        */
     }
     
     componentWillReceiveProps(){
     /* didn't understood it.
   console.log('nextProps');
         console.log(nextProps);
        console.log('nextState');        
        console.log(nextState);
      */
     }
    
    componentWillUnmount(){
    	clearInterval(this.interval);
    }
    
    render(){
    	return <div>Time Elapsed: {this.state.timeElapsed}</div>;
    }
}

ReactDOM.render(<Timer name='prop'/>,mountNode);


/*Todo App My Version*/
class TodoApp extends React.Component{
	constructor(props){
    	super(props);
        this.state = {
        ItemName: '',
        Items: []
        };
        this.handleChange = this.handleChange.bind(this);
        this.handleItemAdd = this.handleItemAdd.bind(this);
        //console.log(this);
    }

	handleChange(e){
		//console.log('handleChange');
        //console.log(this);
        this.setState({ItemName: e.target.value});
	}

	handleItemAdd(e){
    this.setState((prevState)=>({
    Items: prevState.Items.concat(this.state.ItemName)
    }));
    console.log(this);
    }

	render(){
    	this.renderCount = this.renderCount || 0;
        this.renderCount++;
    	return <div>
        		    <h3>Todo App (renderCount: {this.renderCount})</h3>
        			<div><input id='txtTodoItem' value={this.state.ItemName} onChange={this.handleChange} /></div>
                	<div><input type='button' value='Add Item' onClick={this.handleItemAdd}/></div>
                	<div>
                	<ul>
                		<ToDoListItem items={this.state.Items}/>
                	</ul>
                	</div>
               </div>;
    }
}

class ToDoListItem extends React.Component
{
	render(){
    	return (
        <div>
        {this.props.items.map((item)=>(<li>{item}</li>))}
        </div>
        );
    }
}

ReactDOM.render(<TodoApp/>, mountNode);
